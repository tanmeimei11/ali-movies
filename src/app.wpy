<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
button{
  padding:0;
  margin:0;
  position: relative;
  min-height: 100%;
  
}
page{
 min-height: 100%;
 position: relative;
}
form{
  min-height: 100%;
 position: relative;
}

/* 弹窗 */

.c-modal {
  position: fixed;
  left: 0;
  top: 0;
  z-index: 10;
  width: 100%;
  height: 100%;
  z-index: 10000;
  background-color: rgba(0, 0, 0, 0.5);
  overflow: hidden;
}

.c-modal .c-wrap {
  width: 560rpx;
  background-color: #fff;
  position: relative;
  top: 50%;
  margin: -20rpx auto 0 !important;
  transform: translate(0, -50%);
  border-radius: 8rpx;
  position: relative;
  text-align: center;
}

.c-modal .s-close {
  width: 44rpx;
  height: 44rpx;
  position: absolute;
  right: 10rpx;
  top: 10rpx;
  margin: 0 auto;
  border-radius: 50%;
  background-image: url(https://inimg01.jiuyan.info/in/2017/10/15/1C51CF46-3F39-78F7-1972-C33785B2D124.jpg);
  background-repeat: no-repeat;
  background-size: 28rpx 28rpx;
  background-position: center;
}
</style>

<script>
import wepy from 'wepy'
import { token } from './utils/config.js'
// 支付宝小程序 ES next 语法转换: async await
// import 'wepy-async-function'

export default class extends wepy.app {
  constructor () {
    super()
    // 修复小程序请求并发问题。
    this.use('requestfix')
    // 使用wepy.xxx的方式请求小程序原生API都将Promise化。
    this.use('promisify')

    this.intercept('httpRequest', {
      config (p) {
        p.headers = this.createAuthHeader()
        p.data = p.data || {}
        p.data['privateKey'] = this.globalData.xToken || token
        return p
      }
    })
  }

  async onLaunch(opts) {
    // 渠道埋点
    this.globalData.from = opts.qrcode_from || ''
    /**
     * try
     *   收集微信机型数据
     * catch|finally
     *   none 不提供机型标识信息
     */
    try {
      const { model, platform, version, system, SDKVersion } = wepy.getSystemInfoSync()
      const meta = { model, platform, version, system, SDKVersion }
      this.globalData.AntApp = Object.keys(meta).map(key => `${key}=${meta[key]}`).join(';')
    } finally { /* none */ }
  }

  /**
   * 构造权限头部
   */
  createAuthHeader() {
    const { AntApp, xToken, xAries, from } = this.globalData
    const headers = { 'AntApp': AntApp }
    console.log(xToken)
    if (xToken) {
      headers['tg_auth'] = xToken
      headers['_aries'] = xAries
    }

    if (from) {
      headers['from'] = from
    }

    return headers
  }

  globalData = {
    /** 收集微信机型数据 */
    AntApp: '',
    /** 用户唯一标识符 */
    xToken: null,
    /** 设备失效期 */
    xAries: null
  }

  config = {
    pages: ['pages/self/self', 'pages/index/index', 'pages/self/self', 'pages/detail/detail', 'pages/seat/seat', 'pages/result/result', 'pages/card/card', 'pages/ticket/ticket'],
    tabBar: {
      'textColor': '#4A4A4A',
      'selectedColor': '#D0A661',
      'backgroundColor': '#F5F5F9',
      items: [{
        'pagePath': 'pages/index/index',
        'icon': 'image/icon_index.png',
        'activeIcon': 'image/icon_index_on.png',
        'name': '首页'
      }, {
        'pagePath': 'pages/seat/seat',
        'icon': 'image/icon_seat.png',
        'activeIcon': 'image/icon_seat_on.png',
        'name': '选座'
      }, {
        'pagePath': 'pages/self/self',
        'icon': 'image/icon_self.png',
        'activeIcon': 'image/icon_self_on.png',
        'name': '我的'
      }]
    }
  }
}
</script>
